#include "header.h"

// Конструктор для стека
Stack::Stack() {
    top = nullptr;
}

// Сложность: O(1)
void Stack::push(string value) {
    // создаем новый узел {значение, полученное на входе; указатель на текущую вершину стека}
    Node1* node = new Node1(value); // устанавливаем новый узел поверх стека
    
    node->next = top; // устанавливаем указатель нового узла на текущую вершину стека
    top = node; // переносим указатель вершины стека (top) на только что созданный узел
}

// Сложность: O(1)
void Stack::pop() {
    // сначала проверяем, пуст ли стек
    if (top == nullptr) {
        throw runtime_error("Стек пуст!");
    } else {
        Node1* temp = top; // сохраняем указатель на текущий верхний элемент стека
        
        // перемещаем указатель вершины стека на следующий элемент
        top = top->next; // убираем верхний элемент
        
        delete temp; // освобождаем память, которая была выделена для удаленного элемента
    }
}

// Сложность: O(n)
void Stack::display() {
    // проверяем, пуст ли стек
    if (top == nullptr) {
        cout << "Стек пуст!" << endl;
    } else {
        Node1* current = top; // указатель для итерации по элементам стека
        
        // цикл продолжается до тех пор, пока не достигнут конец стека
        while (current != nullptr) {
            cout << current->data << " ";
            
            current = current->next; // передвигаем указатель на следующий элемент
        }
        cout << endl;
    }
}

// Метод для получения значения верхнего элемента стека без его удаления
string Stack::peek() {
    if (top == nullptr) {
        throw runtime_error("Стек пуст!");
    }
    return top->data;
}